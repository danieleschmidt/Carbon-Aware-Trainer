
global
    daemon
    log stdout local0
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option log-health-checks
    timeout connect 5000
    timeout client 50000
    timeout server 50000
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Frontend for carbon-aware trainer
frontend carbon_trainer_frontend
    bind *:80
    bind *:443 ssl crt /etc/ssl/certs/carbon-trainer.pem
    redirect scheme https unless { ssl_fc }
    
    # Carbon-aware routing based on current intensity
    acl carbon_low_us src -f /etc/haproxy/low_carbon_us.lst
    acl carbon_low_eu src -f /etc/haproxy/low_carbon_eu.lst
    
    use_backend carbon_trainer_us if carbon_low_us
    use_backend carbon_trainer_eu if carbon_low_eu
    default_backend carbon_trainer_global

# US Backend
backend carbon_trainer_us
    balance roundrobin
    option httpchk GET /health
    server us-west-1 carbon-trainer-us-west-1:8080 check
    server us-west-2 carbon-trainer-us-west-2:8080 check
    server us-east-1 carbon-trainer-us-east-1:8080 check

# EU Backend  
backend carbon_trainer_eu
    balance roundrobin
    option httpchk GET /health
    server eu-west-1 carbon-trainer-eu-west-1:8080 check
    server eu-central-1 carbon-trainer-eu-central-1:8080 check

# Global Backend (fallback)
backend carbon_trainer_global
    balance roundrobin
    option httpchk GET /health
    server global-1 carbon-trainer-global-1:8080 check
    server global-2 carbon-trainer-global-2:8080 check

# Statistics
listen stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
